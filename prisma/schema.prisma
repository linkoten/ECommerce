// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  carts         Cart[]
  orders        Order[]
  authenticators Authenticator[]

  @@map("users")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@map("authenticators")
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[] // [Cart] one-to-many [CartItem]

  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}


model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [id])

  productId String @db.ObjectId
  quantity Int

  cartId String @db.ObjectId
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status Status
  totalPrice Float
  orderItems OrderItem[]
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  product         Product  @relation(fields: [productId], references: [id])
  color           Color
  size            Size
  shippingAddress Address
  billingAddress  Address?
  productId       String   @db.ObjectId

    @@map("orders")

}

enum Status {
  PENDING
  CANCELED
  COMPLETED
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [id])
  productId String @db.ObjectId
  quantity Int

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}



model Product {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String  @unique
  description String
  url String
  price  Float
  colors Color[]
  sizes  Size[]
  photos Photo[]
  orders Order[]
  orderItem OrderItem[]
  cartItem CartItem[]
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    @@map("products")

}



enum Color {
  Red
  Green
  Blue
}

enum Size {
  Small
  Medium
  Large
  XLarge
}

type Photo {
  height Int    @default(200)
  width  Int    @default(100)
  url    String
}

type Address {
  street String
  city   String
  zip    String
}